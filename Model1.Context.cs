//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chaisher
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OptimizeChasierEntities : DbContext
    {
        public OptimizeChasierEntities()
            : base("name=OptimizeChasierEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PO> POes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
    
        public virtual ObjectResult<Nullable<int>> usp_CheckLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CheckLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int usp_InsertNewCatgory(string name, string color, string foreColor)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var foreColorParameter = foreColor != null ?
                new ObjectParameter("ForeColor", foreColor) :
                new ObjectParameter("ForeColor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewCatgory", nameParameter, colorParameter, foreColorParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllCategory_Result> usp_SelectAllCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllCategory_Result>("usp_SelectAllCategory");
        }
    
        public virtual ObjectResult<usp_SelectAllCategoryByID_Result> usp_SelectAllCategoryByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllCategoryByID_Result>("usp_SelectAllCategoryByID", idParameter);
        }
    
        public virtual int usp_UpdateNewCatgory(string name, string color, Nullable<int> id, Nullable<int> foreColor)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var foreColorParameter = foreColor.HasValue ?
                new ObjectParameter("ForeColor", foreColor) :
                new ObjectParameter("ForeColor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateNewCatgory", nameParameter, colorParameter, idParameter, foreColorParameter);
        }
    
        public virtual int usp_DeleteAllCategoryByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllCategoryByID", idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_DeletePRoduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePRoduct", idParameter);
        }
    
        public virtual int usp_InsertNewPRoduct(string productName, Nullable<decimal> price, Nullable<bool> isWeightPrice, Nullable<int> catID, Nullable<bool> isNoteAllowed, Nullable<int> no, Nullable<int> barcode)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var isWeightPriceParameter = isWeightPrice.HasValue ?
                new ObjectParameter("IsWeightPrice", isWeightPrice) :
                new ObjectParameter("IsWeightPrice", typeof(bool));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var isNoteAllowedParameter = isNoteAllowed.HasValue ?
                new ObjectParameter("isNoteAllowed", isNoteAllowed) :
                new ObjectParameter("isNoteAllowed", typeof(bool));
    
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewPRoduct", productNameParameter, priceParameter, isWeightPriceParameter, catIDParameter, isNoteAllowedParameter, noParameter, barcodeParameter);
        }
    
        public virtual ObjectResult<usp_SelectProduct_Result> usp_SelectProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectProduct_Result>("usp_SelectProduct");
        }
    
        public virtual ObjectResult<usp_SelectProductByID_Result> usp_SelectProductByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectProductByID_Result>("usp_SelectProductByID", idParameter);
        }
    
        public virtual int usp_UpdateNewPRoduct(string productName, Nullable<decimal> price, Nullable<bool> isWeightPrice, Nullable<int> catID, Nullable<int> id, Nullable<bool> isNoteAllowed, Nullable<int> no, Nullable<int> barcode)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var isWeightPriceParameter = isWeightPrice.HasValue ?
                new ObjectParameter("IsWeightPrice", isWeightPrice) :
                new ObjectParameter("IsWeightPrice", typeof(bool));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var isNoteAllowedParameter = isNoteAllowed.HasValue ?
                new ObjectParameter("isNoteAllowed", isNoteAllowed) :
                new ObjectParameter("isNoteAllowed", typeof(bool));
    
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("barcode", barcode) :
                new ObjectParameter("barcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateNewPRoduct", productNameParameter, priceParameter, isWeightPriceParameter, catIDParameter, idParameter, isNoteAllowedParameter, noParameter, barcodeParameter);
        }
    
        public virtual ObjectResult<usp_SelectProductByCatID_Result> usp_SelectProductByCatID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectProductByCatID_Result>("usp_SelectProductByCatID", idParameter);
        }
    
        public virtual int usp_DeleteAllClientsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllClientsByID", idParameter);
        }
    
        public virtual int usp_DeleteAllDistrictByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllDistrictByID", idParameter);
        }
    
        public virtual int usp_InsertClients(string clientsName, string clientPhone, string clientAddress, Nullable<int> district)
        {
            var clientsNameParameter = clientsName != null ?
                new ObjectParameter("ClientsName", clientsName) :
                new ObjectParameter("ClientsName", typeof(string));
    
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("ClientPhone", clientPhone) :
                new ObjectParameter("ClientPhone", typeof(string));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("ClientAddress", clientAddress) :
                new ObjectParameter("ClientAddress", typeof(string));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("district", district) :
                new ObjectParameter("district", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertClients", clientsNameParameter, clientPhoneParameter, clientAddressParameter, districtParameter);
        }
    
        public virtual int usp_InsertDidtrict(string districtName)
        {
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertDidtrict", districtNameParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllClients_Result> usp_SelectAllClients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllClients_Result>("usp_SelectAllClients");
        }
    
        public virtual ObjectResult<usp_SelectAllClientsByID_Result> usp_SelectAllClientsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllClientsByID_Result>("usp_SelectAllClientsByID", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllDistrict_Result> usp_SelectAllDistrict()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllDistrict_Result>("usp_SelectAllDistrict");
        }
    
        public virtual ObjectResult<usp_SelectAllDistrictByID_Result> usp_SelectAllDistrictByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllDistrictByID_Result>("usp_SelectAllDistrictByID", idParameter);
        }
    
        public virtual int usp_UpdateClients(string clientsName, string clientPhone, string clientAddress, Nullable<int> id, Nullable<int> district)
        {
            var clientsNameParameter = clientsName != null ?
                new ObjectParameter("ClientsName", clientsName) :
                new ObjectParameter("ClientsName", typeof(string));
    
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("ClientPhone", clientPhone) :
                new ObjectParameter("ClientPhone", typeof(string));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("ClientAddress", clientAddress) :
                new ObjectParameter("ClientAddress", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("district", district) :
                new ObjectParameter("district", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateClients", clientsNameParameter, clientPhoneParameter, clientAddressParameter, idParameter, districtParameter);
        }
    
        public virtual int usp_UpdateDidtrict(string districtName, Nullable<int> id)
        {
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDidtrict", districtNameParameter, idParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllClientsByPhone_Result> usp_SelectAllClientsByPhone(string clientPhone)
        {
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("ClientPhone", clientPhone) :
                new ObjectParameter("ClientPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllClientsByPhone_Result>("usp_SelectAllClientsByPhone", clientPhoneParameter);
        }
    
        public virtual int usp_DeleteRequestOrder(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteRequestOrder", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_InsertRequestedOrder(Nullable<System.DateTime> orderdate, Nullable<int> clientID, Nullable<System.TimeSpan> time, string note, Nullable<int> userID, Nullable<int> shiftId)
        {
            var orderdateParameter = orderdate.HasValue ?
                new ObjectParameter("orderdate", orderdate) :
                new ObjectParameter("orderdate", typeof(System.DateTime));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_InsertRequestedOrder", orderdateParameter, clientIDParameter, timeParameter, noteParameter, userIDParameter, shiftIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequested_Result> usp_SelectRequested()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequested_Result>("usp_SelectRequested");
        }
    
        public virtual ObjectResult<usp_SelectRequestedOrderByDate_Result> usp_SelectRequestedOrderByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedOrderByDate_Result>("usp_SelectRequestedOrderByDate", dateParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedOrderByID_Result> usp_SelectRequestedOrderByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedOrderByID_Result>("usp_SelectRequestedOrderByID", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedOrderDone_Result> usp_SelectRequestedOrderDone()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedOrderDone_Result>("usp_SelectRequestedOrderDone");
        }
    
        public virtual int usp_UpdateRequestedOrder(Nullable<System.DateTime> orderdate, Nullable<int> clientID, Nullable<System.TimeSpan> time, Nullable<int> id, string note, Nullable<int> userID)
        {
            var orderdateParameter = orderdate.HasValue ?
                new ObjectParameter("orderdate", orderdate) :
                new ObjectParameter("orderdate", typeof(System.DateTime));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRequestedOrder", orderdateParameter, clientIDParameter, timeParameter, idParameter, noteParameter, userIDParameter);
        }
    
        public virtual int usp_DeleteRequestedOrderDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteRequestedOrderDetails", idParameter);
        }
    
        public virtual int usp_InsertRequestedORderDetails(Nullable<int> requestedID, Nullable<int> prodid, Nullable<decimal> qnty, Nullable<decimal> price, string notes)
        {
            var requestedIDParameter = requestedID.HasValue ?
                new ObjectParameter("RequestedID", requestedID) :
                new ObjectParameter("RequestedID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var qntyParameter = qnty.HasValue ?
                new ObjectParameter("qnty", qnty) :
                new ObjectParameter("qnty", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertRequestedORderDetails", requestedIDParameter, prodidParameter, qntyParameter, priceParameter, notesParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedORderByORderID_Result> usp_SelectRequestedORderByORderID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedORderByORderID_Result>("usp_SelectRequestedORderByORderID", idParameter);
        }
    
        public virtual int usp_UpdateRequestedORderDetails(Nullable<int> requestedID, Nullable<int> prodid, Nullable<decimal> qnty, Nullable<decimal> price, Nullable<int> id, string notes)
        {
            var requestedIDParameter = requestedID.HasValue ?
                new ObjectParameter("RequestedID", requestedID) :
                new ObjectParameter("RequestedID", typeof(int));
    
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var qntyParameter = qnty.HasValue ?
                new ObjectParameter("qnty", qnty) :
                new ObjectParameter("qnty", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRequestedORderDetails", requestedIDParameter, prodidParameter, qntyParameter, priceParameter, idParameter, notesParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedORderDetailsById_Result> usp_SelectRequestedORderDetailsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedORderDetailsById_Result>("usp_SelectRequestedORderDetailsById", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedORderDetailsByOrderId_Result> usp_SelectRequestedORderDetailsByOrderId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedORderDetailsByOrderId_Result>("usp_SelectRequestedORderDetailsByOrderId", idParameter);
        }
    
        public virtual int usp_updateTotal(Nullable<bool> done, Nullable<decimal> total, Nullable<int> id, string note, Nullable<decimal> rEM, Nullable<int> clientId)
        {
            var doneParameter = done.HasValue ?
                new ObjectParameter("done", done) :
                new ObjectParameter("done", typeof(bool));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var rEMParameter = rEM.HasValue ?
                new ObjectParameter("REM", rEM) :
                new ObjectParameter("REM", typeof(decimal));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_updateTotal", doneParameter, totalParameter, idParameter, noteParameter, rEMParameter, clientIdParameter);
        }
    
        public virtual int usp_DeleteAllEmployeeByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllEmployeeByID", idParameter);
        }
    
        public virtual int usp_InsertEmployee(string employeeName, Nullable<bool> isDelevery, Nullable<decimal> salary, Nullable<bool> isweekly, Nullable<decimal> working, Nullable<bool> isManager, Nullable<bool> isAttendance)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var isDeleveryParameter = isDelevery.HasValue ?
                new ObjectParameter("IsDelevery", isDelevery) :
                new ObjectParameter("IsDelevery", typeof(bool));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(decimal));
    
            var isweeklyParameter = isweekly.HasValue ?
                new ObjectParameter("Isweekly", isweekly) :
                new ObjectParameter("Isweekly", typeof(bool));
    
            var workingParameter = working.HasValue ?
                new ObjectParameter("working", working) :
                new ObjectParameter("working", typeof(decimal));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("IsManager", isManager) :
                new ObjectParameter("IsManager", typeof(bool));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertEmployee", employeeNameParameter, isDeleveryParameter, salaryParameter, isweeklyParameter, workingParameter, isManagerParameter, isAttendanceParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllEmployee_Result> usp_SelectAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllEmployee_Result>("usp_SelectAllEmployee");
        }
    
        public virtual ObjectResult<usp_SelectAllEmployeeByID_Result> usp_SelectAllEmployeeByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllEmployeeByID_Result>("usp_SelectAllEmployeeByID", idParameter);
        }
    
        public virtual int usp_UpdateEmployee(string employeeName, Nullable<bool> isDelevery, Nullable<decimal> salary, Nullable<bool> isweekly, Nullable<decimal> working, Nullable<int> id, Nullable<bool> isManager, Nullable<bool> isAttendance)
        {
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var isDeleveryParameter = isDelevery.HasValue ?
                new ObjectParameter("IsDelevery", isDelevery) :
                new ObjectParameter("IsDelevery", typeof(bool));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(decimal));
    
            var isweeklyParameter = isweekly.HasValue ?
                new ObjectParameter("Isweekly", isweekly) :
                new ObjectParameter("Isweekly", typeof(bool));
    
            var workingParameter = working.HasValue ?
                new ObjectParameter("working", working) :
                new ObjectParameter("working", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("IsManager", isManager) :
                new ObjectParameter("IsManager", typeof(bool));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmployee", employeeNameParameter, isDeleveryParameter, salaryParameter, isweeklyParameter, workingParameter, idParameter, isManagerParameter, isAttendanceParameter);
        }
    
        public virtual int usp_InsertNewExpence(Nullable<decimal> expenceAmount, string expenceDue, Nullable<int> employeeID, Nullable<System.DateTime> exDate, Nullable<int> orderid)
        {
            var expenceAmountParameter = expenceAmount.HasValue ?
                new ObjectParameter("ExpenceAmount", expenceAmount) :
                new ObjectParameter("ExpenceAmount", typeof(decimal));
    
            var expenceDueParameter = expenceDue != null ?
                new ObjectParameter("ExpenceDue", expenceDue) :
                new ObjectParameter("ExpenceDue", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var exDateParameter = exDate.HasValue ?
                new ObjectParameter("exDate", exDate) :
                new ObjectParameter("exDate", typeof(System.DateTime));
    
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("orderid", orderid) :
                new ObjectParameter("orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewExpence", expenceAmountParameter, expenceDueParameter, employeeIDParameter, exDateParameter, orderidParameter);
        }
    
        public virtual int usp_DeleveryOrder(Nullable<int> employeeID, Nullable<decimal> rem, Nullable<int> id)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var remParameter = rem.HasValue ?
                new ObjectParameter("rem", rem) :
                new ObjectParameter("rem", typeof(decimal));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleveryOrder", employeeIDParameter, remParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_SelectOrdersdelevery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_SelectOrdersdelevery");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_SelectOrdersUnderPre()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_SelectOrdersUnderPre");
        }
    
        public virtual ObjectResult<usp_SelectAllExpence_Result> usp_SelectAllExpence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllExpence_Result>("usp_SelectAllExpence");
        }
    
        public virtual ObjectResult<usp_SelectExpenceByID_Result> usp_SelectExpenceByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectExpenceByID_Result>("usp_SelectExpenceByID", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectExpenceByOrderID_Result> usp_SelectExpenceByOrderID(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectExpenceByOrderID_Result>("usp_SelectExpenceByOrderID", orderIdParameter);
        }
    
        public virtual ObjectResult<usp_SelectOrderByDate_Result> usp_SelectOrderByDate(Nullable<System.DateTime> forderDate, Nullable<System.DateTime> torderDate)
        {
            var forderDateParameter = forderDate.HasValue ?
                new ObjectParameter("forderDate", forderDate) :
                new ObjectParameter("forderDate", typeof(System.DateTime));
    
            var torderDateParameter = torderDate.HasValue ?
                new ObjectParameter("torderDate", torderDate) :
                new ObjectParameter("torderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectOrderByDate_Result>("usp_SelectOrderByDate", forderDateParameter, torderDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SumSelectOrderByDate(Nullable<System.DateTime> forderDate, Nullable<System.DateTime> torderDate)
        {
            var forderDateParameter = forderDate.HasValue ?
                new ObjectParameter("forderDate", forderDate) :
                new ObjectParameter("forderDate", typeof(System.DateTime));
    
            var torderDateParameter = torderDate.HasValue ?
                new ObjectParameter("torderDate", torderDate) :
                new ObjectParameter("torderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SumSelectOrderByDate", forderDateParameter, torderDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SumSelectOrderByDateDel(Nullable<System.DateTime> forderDate, Nullable<System.DateTime> torderDate)
        {
            var forderDateParameter = forderDate.HasValue ?
                new ObjectParameter("forderDate", forderDate) :
                new ObjectParameter("forderDate", typeof(System.DateTime));
    
            var torderDateParameter = torderDate.HasValue ?
                new ObjectParameter("torderDate", torderDate) :
                new ObjectParameter("torderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SumSelectOrderByDateDel", forderDateParameter, torderDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SumSelectOrderByDateTake(Nullable<System.DateTime> forderDate, Nullable<System.DateTime> torderDate)
        {
            var forderDateParameter = forderDate.HasValue ?
                new ObjectParameter("forderDate", forderDate) :
                new ObjectParameter("forderDate", typeof(System.DateTime));
    
            var torderDateParameter = torderDate.HasValue ?
                new ObjectParameter("torderDate", torderDate) :
                new ObjectParameter("torderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SumSelectOrderByDateTake", forderDateParameter, torderDateParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllClientsByDistrict_Result> usp_SelectAllClientsByDistrict(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllClientsByDistrict_Result>("usp_SelectAllClientsByDistrict", idParameter);
        }
    
        public virtual int usp_DeleteAllSuppliersByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllSuppliersByID", idParameter);
        }
    
        public virtual int usp_insertAllSuppliersByID(string supplierName, string supplierPhone, string supplierAddress)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierPhoneParameter = supplierPhone != null ?
                new ObjectParameter("SupplierPhone", supplierPhone) :
                new ObjectParameter("SupplierPhone", typeof(string));
    
            var supplierAddressParameter = supplierAddress != null ?
                new ObjectParameter("SupplierAddress", supplierAddress) :
                new ObjectParameter("SupplierAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertAllSuppliersByID", supplierNameParameter, supplierPhoneParameter, supplierAddressParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllSuppliers_Result> usp_SelectAllSuppliers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllSuppliers_Result>("usp_SelectAllSuppliers");
        }
    
        public virtual ObjectResult<usp_SelectAllSuppliersByID_Result> usp_SelectAllSuppliersByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllSuppliersByID_Result>("usp_SelectAllSuppliersByID", idParameter);
        }
    
        public virtual int usp_UpdateAllSuppliersByID(Nullable<int> id, string supplierName, string supplierPhone, string supplierAddress)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierPhoneParameter = supplierPhone != null ?
                new ObjectParameter("SupplierPhone", supplierPhone) :
                new ObjectParameter("SupplierPhone", typeof(string));
    
            var supplierAddressParameter = supplierAddress != null ?
                new ObjectParameter("SupplierAddress", supplierAddress) :
                new ObjectParameter("SupplierAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAllSuppliersByID", idParameter, supplierNameParameter, supplierPhoneParameter, supplierAddressParameter);
        }
    
        public virtual int usp_DeleteAllRowMatrialByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllRowMatrialByID", idParameter);
        }
    
        public virtual int usp_insertAllRowMatrialByID(string productName)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertAllRowMatrialByID", productNameParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllRowMatrial_Result> usp_SelectAllRowMatrial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllRowMatrial_Result>("usp_SelectAllRowMatrial");
        }
    
        public virtual ObjectResult<usp_SelectAllRowMatrialByID_Result> usp_SelectAllRowMatrialByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllRowMatrialByID_Result>("usp_SelectAllRowMatrialByID", idParameter);
        }
    
        public virtual int usp_UpdateAllRowMatrialByID(Nullable<int> id, string productName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAllRowMatrialByID", idParameter, productNameParameter);
        }
    
        public virtual int usp_DeleteAllSuppliersProductsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllSuppliersProductsByID", idParameter);
        }
    
        public virtual int usp_insertAllSuppliersProductsByID(Nullable<int> supplierID, Nullable<int> rowMaterialID, Nullable<decimal> price)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var rowMaterialIDParameter = rowMaterialID.HasValue ?
                new ObjectParameter("RowMaterialID", rowMaterialID) :
                new ObjectParameter("RowMaterialID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertAllSuppliersProductsByID", supplierIDParameter, rowMaterialIDParameter, priceParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllSuppliersProducts_Result> usp_SelectAllSuppliersProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllSuppliersProducts_Result>("usp_SelectAllSuppliersProducts");
        }
    
        public virtual ObjectResult<usp_SelectAllSuppliersProductsByID_Result> usp_SelectAllSuppliersProductsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllSuppliersProductsByID_Result>("usp_SelectAllSuppliersProductsByID", idParameter);
        }
    
        public virtual int usp_UpdateAllSuppliersProductsByID(Nullable<int> id, Nullable<int> supplierID, Nullable<int> rowMaterialID, Nullable<decimal> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var rowMaterialIDParameter = rowMaterialID.HasValue ?
                new ObjectParameter("RowMaterialID", rowMaterialID) :
                new ObjectParameter("RowMaterialID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAllSuppliersProductsByID", idParameter, supplierIDParameter, rowMaterialIDParameter, priceParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllSuppliersProductsBySub_Result> usp_SelectAllSuppliersProductsBySub(Nullable<int> supID)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllSuppliersProductsBySub_Result>("usp_SelectAllSuppliersProductsBySub", supIDParameter);
        }
    
        public virtual int usp_DeleteAllPOByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllPOByID", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_insertAllPOByID(Nullable<int> supplierID, Nullable<System.DateTime> date, Nullable<decimal> total, Nullable<bool> ispaid)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var ispaidParameter = ispaid.HasValue ?
                new ObjectParameter("ispaid", ispaid) :
                new ObjectParameter("ispaid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_insertAllPOByID", supplierIDParameter, dateParameter, totalParameter, ispaidParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPO_Result> usp_SelectAllPO(Nullable<bool> ispaid)
        {
            var ispaidParameter = ispaid.HasValue ?
                new ObjectParameter("ispaid", ispaid) :
                new ObjectParameter("ispaid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPO_Result>("usp_SelectAllPO", ispaidParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPOByID_Result> usp_SelectAllPOByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPOByID_Result>("usp_SelectAllPOByID", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPOBySubID_Result> usp_SelectAllPOBySubID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPOBySubID_Result>("usp_SelectAllPOBySubID", idParameter);
        }
    
        public virtual int usp_UpdateAllPOByID(Nullable<int> id, Nullable<int> supplierID, Nullable<System.DateTime> date, Nullable<decimal> total, Nullable<bool> ispaid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var ispaidParameter = ispaid.HasValue ?
                new ObjectParameter("ispaid", ispaid) :
                new ObjectParameter("ispaid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAllPOByID", idParameter, supplierIDParameter, dateParameter, totalParameter, ispaidParameter);
        }
    
        public virtual int usp_DeleteAllPODetailsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteAllPODetailsByID", idParameter);
        }
    
        public virtual int usp_insertAllPODetailsByID(Nullable<int> pOID, Nullable<int> subPro, Nullable<decimal> qnty, Nullable<decimal> price, Nullable<System.DateTime> date)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var subProParameter = subPro.HasValue ?
                new ObjectParameter("subPro", subPro) :
                new ObjectParameter("subPro", typeof(int));
    
            var qntyParameter = qnty.HasValue ?
                new ObjectParameter("qnty", qnty) :
                new ObjectParameter("qnty", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insertAllPODetailsByID", pOIDParameter, subProParameter, qntyParameter, priceParameter, dateParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPODetails_Result> usp_SelectAllPODetails(Nullable<int> poid)
        {
            var poidParameter = poid.HasValue ?
                new ObjectParameter("Poid", poid) :
                new ObjectParameter("Poid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPODetails_Result>("usp_SelectAllPODetails", poidParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPODetailsByID_Result> usp_SelectAllPODetailsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPODetailsByID_Result>("usp_SelectAllPODetailsByID", idParameter);
        }
    
        public virtual int usp_UpdateAllPODetailsByID(Nullable<int> id, Nullable<int> pOID, Nullable<int> subPro, Nullable<decimal> qnty)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            var subProParameter = subPro.HasValue ?
                new ObjectParameter("subPro", subPro) :
                new ObjectParameter("subPro", typeof(int));
    
            var qntyParameter = qnty.HasValue ?
                new ObjectParameter("qnty", qnty) :
                new ObjectParameter("qnty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAllPODetailsByID", idParameter, pOIDParameter, subProParameter, qntyParameter);
        }
    
        public virtual int usp_DeleteEmployeeAttedance(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteEmployeeAttedance", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeAttedance_Result> usp_SelectEmployeeAttedance(Nullable<int> eid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> endate)
        {
            var eidParameter = eid.HasValue ?
                new ObjectParameter("eid", eid) :
                new ObjectParameter("eid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endateParameter = endate.HasValue ?
                new ObjectParameter("endate", endate) :
                new ObjectParameter("endate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeAttedance_Result>("usp_SelectEmployeeAttedance", eidParameter, startdateParameter, endateParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeeAttedanceByID_Result> usp_SelectEmployeeAttedanceByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeeAttedanceByID_Result>("usp_SelectEmployeeAttedanceByID", idParameter);
        }
    
        public virtual int usp_UpdateEmployeeAttedance(Nullable<int> employeeID, Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, Nullable<decimal> totalWorkingHours, Nullable<System.DateTime> date, Nullable<int> id)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var totalWorkingHoursParameter = totalWorkingHours.HasValue ?
                new ObjectParameter("TotalWorkingHours", totalWorkingHours) :
                new ObjectParameter("TotalWorkingHours", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateEmployeeAttedance", employeeIDParameter, intimeParameter, outTimeParameter, totalWorkingHoursParameter, dateParameter, idParameter);
        }
    
        public virtual int usp_InsertEmployeeAttedance(Nullable<int> employeeID, Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, Nullable<decimal> totalWorkingHours, Nullable<System.DateTime> date, Nullable<int> id)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var totalWorkingHoursParameter = totalWorkingHours.HasValue ?
                new ObjectParameter("TotalWorkingHours", totalWorkingHours) :
                new ObjectParameter("TotalWorkingHours", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertEmployeeAttedance", employeeIDParameter, intimeParameter, outTimeParameter, totalWorkingHoursParameter, dateParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_TotalWorkingHours(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> empId)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_TotalWorkingHours", startdateParameter, enddateParameter, empIdParameter);
        }
    
        public virtual int usp_InsertEmployeeLoan(Nullable<int> empID, Nullable<bool> isLoan, Nullable<decimal> amount, Nullable<System.DateTime> date)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var isLoanParameter = isLoan.HasValue ?
                new ObjectParameter("IsLoan", isLoan) :
                new ObjectParameter("IsLoan", typeof(bool));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertEmployeeLoan", empIDParameter, isLoanParameter, amountParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectLaon(Nullable<int> empId, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<bool> isLoan)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var isLoanParameter = isLoan.HasValue ?
                new ObjectParameter("isLoan", isLoan) :
                new ObjectParameter("isLoan", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectLaon", empIdParameter, startParameter, endParameter, isLoanParameter);
        }
    
        public virtual ObjectResult<usp_selectAllDElExpenceByDate_Result> usp_selectAllDElExpenceByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_selectAllDElExpenceByDate_Result>("usp_selectAllDElExpenceByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_selectExpenceByDate_Result> usp_selectExpenceByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_selectExpenceByDate_Result>("usp_selectExpenceByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_selectTotalDElExpenceByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_selectTotalDElExpenceByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_selectTotalExpenceByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_selectTotalExpenceByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_selectMaxClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_selectMaxClient");
        }
    
        public virtual ObjectResult<usp_searchProduct_Result> usp_searchProduct(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_searchProduct_Result>("usp_searchProduct", nameParameter);
        }
    
        public virtual int usp_InsertNewUser(string username, string password, Nullable<int> prevId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var prevIdParameter = prevId.HasValue ?
                new ObjectParameter("prevId", prevId) :
                new ObjectParameter("prevId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewUser", usernameParameter, passwordParameter, prevIdParameter);
        }
    
        public virtual int usp_DeleteNewUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteNewUser", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectNewUser_Result> usp_SelectNewUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectNewUser_Result>("usp_SelectNewUser");
        }
    
        public virtual ObjectResult<usp_SelectNewUserByID_Result> usp_SelectNewUserByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectNewUserByID_Result>("usp_SelectNewUserByID", idParameter);
        }
    
        public virtual int usp_UpdateNewUser(string username, string password, Nullable<int> prevId, Nullable<int> id)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var prevIdParameter = prevId.HasValue ?
                new ObjectParameter("prevId", prevId) :
                new ObjectParameter("prevId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateNewUser", usernameParameter, passwordParameter, prevIdParameter, idParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllEmployeeAttedance_Result> usp_SelectAllEmployeeAttedance(Nullable<System.DateTime> startdate, Nullable<System.DateTime> endate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endateParameter = endate.HasValue ?
                new ObjectParameter("endate", endate) :
                new ObjectParameter("endate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllEmployeeAttedance_Result>("usp_SelectAllEmployeeAttedance", startdateParameter, endateParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllEmployeeSalary_Result> usp_SelectAllEmployeeSalary(Nullable<System.DateTime> startdate, Nullable<System.DateTime> endate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endateParameter = endate.HasValue ?
                new ObjectParameter("endate", endate) :
                new ObjectParameter("endate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllEmployeeSalary_Result>("usp_SelectAllEmployeeSalary", startdateParameter, endateParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPOBySubIDAndDate_Result> usp_SelectAllPOBySubIDAndDate(Nullable<int> id, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPOBySubIDAndDate_Result>("usp_SelectAllPOBySubIDAndDate", idParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectSumPOBySubIDAndDate(Nullable<int> id, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectSumPOBySubIDAndDate", idParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedOrders_Result> usp_SelectRequestedOrders(Nullable<int> empId, Nullable<System.DateTime> date)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedOrders_Result>("usp_SelectRequestedOrders", empIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectSumRequestedOrders(Nullable<int> empId, Nullable<System.DateTime> date)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectSumRequestedOrders", empIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<usp_selectProductByCode_Result> usp_selectProductByCode(Nullable<int> code)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_selectProductByCode_Result>("usp_selectProductByCode", codeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectSumRequestedORderDetailsByOrderId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectSumRequestedORderDetailsByOrderId", idParameter);
        }
    
        public virtual int usp_InsertNewShift(Nullable<System.TimeSpan> shiftstart, Nullable<System.TimeSpan> shiftend, Nullable<int> userID)
        {
            var shiftstartParameter = shiftstart.HasValue ?
                new ObjectParameter("Shiftstart", shiftstart) :
                new ObjectParameter("Shiftstart", typeof(System.TimeSpan));
    
            var shiftendParameter = shiftend.HasValue ?
                new ObjectParameter("Shiftend", shiftend) :
                new ObjectParameter("Shiftend", typeof(System.TimeSpan));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertNewShift", shiftstartParameter, shiftendParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_SelectEmployeeShift(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_SelectEmployeeShift", userIDParameter);
        }
    
        public virtual ObjectResult<usp_SelectRequestedORderByShiftID_Result> usp_SelectRequestedORderByShiftID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRequestedORderByShiftID_Result>("usp_SelectRequestedORderByShiftID", idParameter);
        }
    
        public virtual int usp_UpdateNewShift(Nullable<System.TimeSpan> shiftend, Nullable<int> userID, Nullable<int> id)
        {
            var shiftendParameter = shiftend.HasValue ?
                new ObjectParameter("Shiftend", shiftend) :
                new ObjectParameter("Shiftend", typeof(System.TimeSpan));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateNewShift", shiftendParameter, userIDParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SumSelectOrderByShift(Nullable<int> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SumSelectOrderByShift", shiftIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SumSelectOrderByShiftDel(Nullable<int> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SumSelectOrderByShiftDel", shiftIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SumSelectOrderByShiftTake(Nullable<int> shiftID)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SumSelectOrderByShiftTake", shiftIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectSumPO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectSumPO");
        }
    
        public virtual ObjectResult<usp_SelectAllPOByDate_Result> usp_SelectAllPOByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPOByDate_Result>("usp_SelectAllPOByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectSumPOByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectSumPOByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectUnpaidSumPOByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectUnpaidSumPOByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_SelectpaidSumPOByDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_SelectpaidSumPOByDate", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_SelectActiveShift_Result> usp_SelectActiveShift()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectActiveShift_Result>("usp_SelectActiveShift");
        }
    
        public virtual ObjectResult<usp_SelectRem_Result> usp_SelectRem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectRem_Result>("usp_SelectRem");
        }
    
        public virtual ObjectResult<usp_selectSupplierProduct_Result> usp_selectSupplierProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_selectSupplierProduct_Result>("usp_selectSupplierProduct", idParameter);
        }
    
        public virtual ObjectResult<usp_SelectPOORder_Result> usp_SelectPOORder(Nullable<int> supID, Nullable<System.DateTime> date)
        {
            var supIDParameter = supID.HasValue ?
                new ObjectParameter("supID", supID) :
                new ObjectParameter("supID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectPOORder_Result>("usp_SelectPOORder", supIDParameter, dateParameter);
        }
    
        public virtual int usp_UpdatePOTotal(Nullable<int> id, Nullable<decimal> total)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePOTotal", idParameter, totalParameter);
        }
    
        public virtual ObjectResult<usp_SelectAllPODetailsByPOID_Result> usp_SelectAllPODetailsByPOID(Nullable<int> id, Nullable<int> sid, Nullable<System.DateTime> date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectAllPODetailsByPOID_Result>("usp_SelectAllPODetailsByPOID", idParameter, sidParameter, dateParameter);
        }
    
        public virtual int usp_subPOTotal(Nullable<int> id, Nullable<decimal> total)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_subPOTotal", idParameter, totalParameter);
        }
    
        public virtual ObjectResult<usp_SelectTotalqntyandPrice_Result> usp_SelectTotalqntyandPrice(Nullable<int> id, Nullable<System.DateTime> sdate, Nullable<System.DateTime> endate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var endateParameter = endate.HasValue ?
                new ObjectParameter("endate", endate) :
                new ObjectParameter("endate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectTotalqntyandPrice_Result>("usp_SelectTotalqntyandPrice", idParameter, sdateParameter, endateParameter);
        }
    }
}
